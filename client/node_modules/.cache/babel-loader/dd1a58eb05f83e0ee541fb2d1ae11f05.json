{"ast":null,"code":"import { SET_CURRENT_USER, USER_LOADING, GET_ERRORS } from \"./types\";\nimport axios from \"axios\";\nimport jwt_decode from \"jwt-decode\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport { createBrowserHistory } from 'history';\nconst history = createBrowserHistory();\nimport { useSelector, useDispatch } from \"react-redux\";\nconst dispatch = useDispatch();\nexport const registerUser = userData => dispatch => {\n  axios.post(\"http://localhost:3000/users/register\", userData).then(() => {\n    console.log(\"success\");\n    history.push(\"/login\");\n  }) // re-direct to login on successful register\n  .catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err\n  }));\n}; // Login - get user token\n\nexport const loginUser = userData => dispatch => {\n  axios.post(\"http://localhost:3000/users/login\", userData).then(res => {\n    // Save to localStorage\n    // Set token to localStorage\n    const {\n      token\n    } = res.data;\n    localStorage.setItem(\"jwtToken\", token); // Set token to Auth header\n\n    setAuthToken(token); // Decode token to get user data\n\n    const decoded = jwt_decode(token); // Set current user\n\n    dispatch(setCurrentUser(decoded));\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.message\n  }));\n};\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n};\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n};\nexport const logoutUser = () => dispatch => {\n  localStorage.removeItem(\"jwtToken\");\n  setAuthToken(false);\n  dispatch(setCurrentUser({}));\n};","map":{"version":3,"sources":["/Users/omoruyiohuoba/Desktop/APPS/WEB DEVELOPMENT/BLOOMBANK-BANK-LOGIN-PORTAL/client/src/actions/authActions.js"],"names":["SET_CURRENT_USER","USER_LOADING","GET_ERRORS","axios","jwt_decode","setAuthToken","createBrowserHistory","history","useSelector","useDispatch","dispatch","registerUser","userData","post","then","console","log","push","catch","err","type","payload","loginUser","res","token","data","localStorage","setItem","decoded","setCurrentUser","message","setUserLoading","logoutUser","removeItem"],"mappings":"AAAA,SAAQA,gBAAR,EAA0BC,YAA1B,EAAwCC,UAAxC,QAAyD,SAAzD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,SAASC,oBAAT,QAAqC,SAArC;AACA,MAAMC,OAAO,GAAGD,oBAAoB,EAApC;AACA,SAAQE,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;AAEA,MAAMC,QAAQ,GAAGD,WAAW,EAA5B;AAIA,OAAO,MAAME,YAAY,GAAIC,QAAD,IAAcF,QAAQ,IAAI;AAElDP,EAAAA,KAAK,CAACU,IAAN,CAAW,sCAAX,EAAmDD,QAAnD,EACGE,IADH,CACQ,MAAM;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACAT,IAAAA,OAAO,CAACU,IAAR,CAAa,QAAb;AACD,GAJH,EAIK;AAJL,GAKGC,KALH,CAKSC,GAAG,IACRT,QAAQ,CAAC;AACPU,IAAAA,IAAI,EAAElB,UADC;AAEPmB,IAAAA,OAAO,EAAEF;AAFF,GAAD,CANZ;AAWD,CAbI,C,CAeL;;AACA,OAAO,MAAMG,SAAS,GAAGV,QAAQ,IAAIF,QAAQ,IAAI;AAC/CP,EAAAA,KAAK,CAACU,IAAN,CAAW,mCAAX,EAAgDD,QAAhD,EACGE,IADH,CACQS,GAAG,IAAI;AACX;AACN;AACM,UAAM;AAAEC,MAAAA;AAAF,QAAYD,GAAG,CAACE,IAAtB;AACAC,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCH,KAAjC,EAJW,CAKX;;AACAnB,IAAAA,YAAY,CAACmB,KAAD,CAAZ,CANW,CAOX;;AACA,UAAMI,OAAO,GAAGxB,UAAU,CAACoB,KAAD,CAA1B,CARW,CASX;;AACAd,IAAAA,QAAQ,CAACmB,cAAc,CAACD,OAAD,CAAf,CAAR;AACD,GAZH,EAaGV,KAbH,CAaSC,GAAG,IACRT,QAAQ,CAAC;AACPU,IAAAA,IAAI,EAAElB,UADC;AAEPmB,IAAAA,OAAO,EAAEF,GAAG,CAACW;AAFN,GAAD,CAdZ;AAmBD,CApBM;AAsBT,OAAO,MAAMD,cAAc,GAAGD,OAAO,IAAI;AACjC,SAAO;AACHR,IAAAA,IAAI,EAAEpB,gBADH;AAEHqB,IAAAA,OAAO,EAAEO;AAFN,GAAP;AAIH,CALE;AAON,OAAO,MAAMG,cAAc,GAAG,MAAM;AAC7B,SAAO;AACHX,IAAAA,IAAI,EAAEnB;AADH,GAAP;AAGH,CAJG;AAMR,OAAO,MAAM+B,UAAU,GAAG,MAAMtB,QAAQ,IAAI;AACpCgB,EAAAA,YAAY,CAACO,UAAb,CAAwB,UAAxB;AACA5B,EAAAA,YAAY,CAAC,KAAD,CAAZ;AACAK,EAAAA,QAAQ,CAACmB,cAAc,CAAC,EAAD,CAAf,CAAR;AACH,CAJE","sourcesContent":["import {SET_CURRENT_USER, USER_LOADING, GET_ERRORS} from \"./types\";\nimport axios from \"axios\";\nimport jwt_decode from \"jwt-decode\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport { createBrowserHistory } from 'history';\nconst history = createBrowserHistory();\nimport {useSelector, useDispatch} from \"react-redux\";\n\nconst dispatch = useDispatch();\n\n\n\nexport const registerUser = (userData) => dispatch => {\n\n    axios.post(\"http://localhost:3000/users/register\", userData)\n      .then(() => {\n        console.log(\"success\");\n        history.push(\"/login\")\n      }) // re-direct to login on successful register\n      .catch(err =>\n        dispatch({\n          type: GET_ERRORS,\n          payload: err\n        })\n      );\n  };\n\n  // Login - get user token\n  export const loginUser = userData => dispatch => {\n    axios.post(\"http://localhost:3000/users/login\", userData)\n      .then(res => {\n        // Save to localStorage\n  // Set token to localStorage\n        const { token } = res.data;\n        localStorage.setItem(\"jwtToken\", token);\n        // Set token to Auth header\n        setAuthToken(token);\n        // Decode token to get user data\n        const decoded = jwt_decode(token);\n        // Set current user\n        dispatch(setCurrentUser(decoded));\n      })\n      .catch(err =>\n        dispatch({\n          type: GET_ERRORS,\n          payload: err.message\n        })\n      );\n  };\n\nexport const setCurrentUser = decoded => {\n        return {\n            type: SET_CURRENT_USER,\n            payload: decoded\n        }\n    };\n\n export const setUserLoading = () => {\n        return {\n            type: USER_LOADING\n        };\n    };\n\nexport const logoutUser = () => dispatch => {\n        localStorage.removeItem(\"jwtToken\");\n        setAuthToken(false);\n        dispatch(setCurrentUser({}));\n    };\n\n\n"]},"metadata":{},"sourceType":"module"}