{"ast":null,"code":"import { SET_CURRENT_USER, USER_LOADING, GET_ERRORS } from \"./types\";\nimport axios from \"axios\";\nimport jwt_decode from \"jwt-decode\";\nimport setAuthToken from \"../utils/setAuthToken\";\nexport const registerUser = newUser => dispatch => {\n  axios.post(\"http://localhost:3000/users/register\", newUser).then(res => console.log(res.data)) // re-direct to login on successful register\n  .catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // Login - get user token\n\nexport const loginUser = userData => dispatch => {\n  axios.post(\"http://localhost:3000/users/login\", userData).then(res => {\n    // Save to localStorage\n    // Set token to localStorage\n    const {\n      token\n    } = res.data;\n    localStorage.setItem(\"jwtToken\", token); // Set token to Auth header\n\n    setAuthToken(token); // Decode token to get user data\n\n    const decoded = jwt_decode(token); // Set current user\n\n    dispatch(setCurrentUser(decoded));\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n};\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n};\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n};\nexport const logoutUser = () => dispatch => {\n  localStorage.removeItem(\"jwtToken\");\n  setAuthToken(false);\n  dispatch(setCurrentUser({}));\n};","map":{"version":3,"sources":["/Users/omoruyiohuoba/Desktop/APPS/WEB DEVELOPMENT/BLOOMBANK-BANK-LOGIN-PORTAL/client/src/actions/authActions.js"],"names":["SET_CURRENT_USER","USER_LOADING","GET_ERRORS","axios","jwt_decode","setAuthToken","registerUser","newUser","dispatch","post","then","res","console","log","data","catch","err","type","payload","response","loginUser","userData","token","localStorage","setItem","decoded","setCurrentUser","setUserLoading","logoutUser","removeItem"],"mappings":"AAAA,SAAQA,gBAAR,EAA0BC,YAA1B,EAAwCC,UAAxC,QAAyD,SAAzD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AAGA,OAAO,MAAMC,YAAY,GAAIC,OAAD,IAAaC,QAAQ,IAAI;AAEjDL,EAAAA,KAAK,CACFM,IADH,CACQ,sCADR,EACgDF,OADhD,EAEGG,IAFH,CAEQC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,IAAhB,CAFf,EAEsC;AAFtC,GAGGC,KAHH,CAGSC,GAAG,IACRR,QAAQ,CAAC;AACPS,IAAAA,IAAI,EAAEf,UADC;AAEPgB,IAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaL;AAFf,GAAD,CAJZ;AASD,CAXI,C,CAaL;;AACA,OAAO,MAAMM,SAAS,GAAGC,QAAQ,IAAIb,QAAQ,IAAI;AAC/CL,EAAAA,KAAK,CACFM,IADH,CACQ,mCADR,EAC6CY,QAD7C,EAEGX,IAFH,CAEQC,GAAG,IAAI;AACX;AACN;AACM,UAAM;AAAEW,MAAAA;AAAF,QAAYX,GAAG,CAACG,IAAtB;AACAS,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,KAAjC,EAJW,CAKX;;AACAjB,IAAAA,YAAY,CAACiB,KAAD,CAAZ,CANW,CAOX;;AACA,UAAMG,OAAO,GAAGrB,UAAU,CAACkB,KAAD,CAA1B,CARW,CASX;;AACAd,IAAAA,QAAQ,CAACkB,cAAc,CAACD,OAAD,CAAf,CAAR;AACD,GAbH,EAcGV,KAdH,CAcSC,GAAG,IACRR,QAAQ,CAAC;AACPS,IAAAA,IAAI,EAAEf,UADC;AAEPgB,IAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaL;AAFf,GAAD,CAfZ;AAoBD,CArBM;AAuBT,OAAO,MAAMY,cAAc,GAAGD,OAAO,IAAI;AACjC,SAAO;AACHR,IAAAA,IAAI,EAAEjB,gBADH;AAEHkB,IAAAA,OAAO,EAAEO;AAFN,GAAP;AAIH,CALE;AAON,OAAO,MAAME,cAAc,GAAG,MAAM;AAC7B,SAAO;AACHV,IAAAA,IAAI,EAAEhB;AADH,GAAP;AAGH,CAJG;AAMR,OAAO,MAAM2B,UAAU,GAAG,MAAMpB,QAAQ,IAAI;AACpCe,EAAAA,YAAY,CAACM,UAAb,CAAwB,UAAxB;AACAxB,EAAAA,YAAY,CAAC,KAAD,CAAZ;AACAG,EAAAA,QAAQ,CAACkB,cAAc,CAAC,EAAD,CAAf,CAAR;AACH,CAJE","sourcesContent":["import {SET_CURRENT_USER, USER_LOADING, GET_ERRORS} from \"./types\";\nimport axios from \"axios\";\nimport jwt_decode from \"jwt-decode\";\nimport setAuthToken from \"../utils/setAuthToken\";\n\n\nexport const registerUser = (newUser) => dispatch => {\n\n    axios\n      .post(\"http://localhost:3000/users/register\", newUser)\n      .then(res => console.log(res.data)) // re-direct to login on successful register\n      .catch(err =>\n        dispatch({\n          type: GET_ERRORS,\n          payload: err.response.data\n        })\n      );\n  };\n\n  // Login - get user token\n  export const loginUser = userData => dispatch => {\n    axios\n      .post(\"http://localhost:3000/users/login\", userData)\n      .then(res => {\n        // Save to localStorage\n  // Set token to localStorage\n        const { token } = res.data;\n        localStorage.setItem(\"jwtToken\", token);\n        // Set token to Auth header\n        setAuthToken(token);\n        // Decode token to get user data\n        const decoded = jwt_decode(token);\n        // Set current user\n        dispatch(setCurrentUser(decoded));\n      })\n      .catch(err =>\n        dispatch({\n          type: GET_ERRORS,\n          payload: err.response.data\n        })\n      );\n  };\n\nexport const setCurrentUser = decoded => {\n        return {\n            type: SET_CURRENT_USER,\n            payload: decoded\n        };\n    };\n\n export const setUserLoading = () => {\n        return {\n            type: USER_LOADING\n        };\n    };\n\nexport const logoutUser = () => dispatch => {\n        localStorage.removeItem(\"jwtToken\");\n        setAuthToken(false);\n        dispatch(setCurrentUser({}));\n    };\n\n\n"]},"metadata":{},"sourceType":"module"}