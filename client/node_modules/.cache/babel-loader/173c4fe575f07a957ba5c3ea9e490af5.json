{"ast":null,"code":"import { SET_CURRENT_USER, USER_LOADING, GET_ERRORS } from \"./types\";\nimport axios from \"axios\";\nimport jwt_decode from \"jwt-decode\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport history from \"./history\";\nexport const registerUser = (userData, history) => dispatch => {\n  axios.post(\"http://localhost:3000/users/register\", userData).then(() => history.push(\"/login\")) // re-direct to login on successful register\n  .catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err\n  }));\n}; // Login - get user token\n\nexport const loginUser = userData => dispatch => {\n  axios.post(\"http://localhost:3000/users/login\", userData).then(res => {\n    // Save to localStorage\n    // Set token to localStorage\n    const {\n      token\n    } = res.data;\n    localStorage.setItem(\"jwtToken\", token); // Set token to Auth header\n\n    setAuthToken(token); // Decode token to get user data\n\n    const decoded = jwt_decode(token); // Set current user\n\n    dispatch(setCurrentUser(decoded));\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n};\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n};\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n};\nexport const logoutUser = () => dispatch => {\n  localStorage.removeItem(\"jwtToken\");\n  setAuthToken(false);\n  dispatch(setCurrentUser({}));\n};","map":{"version":3,"sources":["/Users/omoruyiohuoba/Desktop/APPS/WEB DEVELOPMENT/BLOOMBANK-BANK-LOGIN-PORTAL/client/src/actions/authActions.js"],"names":["SET_CURRENT_USER","USER_LOADING","GET_ERRORS","axios","jwt_decode","setAuthToken","history","registerUser","userData","dispatch","post","then","push","catch","err","type","payload","loginUser","res","token","data","localStorage","setItem","decoded","setCurrentUser","response","setUserLoading","logoutUser","removeItem"],"mappings":"AAAA,SAAQA,gBAAR,EAA0BC,YAA1B,EAAwCC,UAAxC,QAAyD,SAAzD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,OAAP,MAAoB,WAApB;AAIA,OAAO,MAAMC,YAAY,GAAG,CAACC,QAAD,EAAWF,OAAX,KAAuBG,QAAQ,IAAI;AAE3DN,EAAAA,KAAK,CAACO,IAAN,CAAW,sCAAX,EAAmDF,QAAnD,EACGG,IADH,CACQ,MAAML,OAAO,CAACM,IAAR,CAAa,QAAb,CADd,EACsC;AADtC,GAEGC,KAFH,CAESC,GAAG,IACRL,QAAQ,CAAC;AACPM,IAAAA,IAAI,EAAEb,UADC;AAEPc,IAAAA,OAAO,EAAEF;AAFF,GAAD,CAHZ;AAQD,CAVI,C,CAYL;;AACA,OAAO,MAAMG,SAAS,GAAGT,QAAQ,IAAIC,QAAQ,IAAI;AAC/CN,EAAAA,KAAK,CACFO,IADH,CACQ,mCADR,EAC6CF,QAD7C,EAEGG,IAFH,CAEQO,GAAG,IAAI;AACX;AACN;AACM,UAAM;AAAEC,MAAAA;AAAF,QAAYD,GAAG,CAACE,IAAtB;AACAC,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCH,KAAjC,EAJW,CAKX;;AACAd,IAAAA,YAAY,CAACc,KAAD,CAAZ,CANW,CAOX;;AACA,UAAMI,OAAO,GAAGnB,UAAU,CAACe,KAAD,CAA1B,CARW,CASX;;AACAV,IAAAA,QAAQ,CAACe,cAAc,CAACD,OAAD,CAAf,CAAR;AACD,GAbH,EAcGV,KAdH,CAcSC,GAAG,IACRL,QAAQ,CAAC;AACPM,IAAAA,IAAI,EAAEb,UADC;AAEPc,IAAAA,OAAO,EAAEF,GAAG,CAACW,QAAJ,CAAaL;AAFf,GAAD,CAfZ;AAoBD,CArBM;AAuBT,OAAO,MAAMI,cAAc,GAAGD,OAAO,IAAI;AACjC,SAAO;AACHR,IAAAA,IAAI,EAAEf,gBADH;AAEHgB,IAAAA,OAAO,EAAEO;AAFN,GAAP;AAIH,CALE;AAON,OAAO,MAAMG,cAAc,GAAG,MAAM;AAC7B,SAAO;AACHX,IAAAA,IAAI,EAAEd;AADH,GAAP;AAGH,CAJG;AAMR,OAAO,MAAM0B,UAAU,GAAG,MAAMlB,QAAQ,IAAI;AACpCY,EAAAA,YAAY,CAACO,UAAb,CAAwB,UAAxB;AACAvB,EAAAA,YAAY,CAAC,KAAD,CAAZ;AACAI,EAAAA,QAAQ,CAACe,cAAc,CAAC,EAAD,CAAf,CAAR;AACH,CAJE","sourcesContent":["import {SET_CURRENT_USER, USER_LOADING, GET_ERRORS} from \"./types\";\nimport axios from \"axios\";\nimport jwt_decode from \"jwt-decode\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport history from \"./history\";\n\n\n\nexport const registerUser = (userData, history) => dispatch => {\n\n    axios.post(\"http://localhost:3000/users/register\", userData)\n      .then(() => history.push(\"/login\")) // re-direct to login on successful register\n      .catch(err =>\n        dispatch({\n          type: GET_ERRORS,\n          payload: err\n        })\n      );\n  };\n\n  // Login - get user token\n  export const loginUser = userData => dispatch => {\n    axios\n      .post(\"http://localhost:3000/users/login\", userData)\n      .then(res => {\n        // Save to localStorage\n  // Set token to localStorage\n        const { token } = res.data;\n        localStorage.setItem(\"jwtToken\", token);\n        // Set token to Auth header\n        setAuthToken(token);\n        // Decode token to get user data\n        const decoded = jwt_decode(token);\n        // Set current user\n        dispatch(setCurrentUser(decoded));\n      })\n      .catch(err =>\n        dispatch({\n          type: GET_ERRORS,\n          payload: err.response.data\n        })\n      );\n  };\n\nexport const setCurrentUser = decoded => {\n        return {\n            type: SET_CURRENT_USER,\n            payload: decoded\n        };\n    };\n\n export const setUserLoading = () => {\n        return {\n            type: USER_LOADING\n        };\n    };\n\nexport const logoutUser = () => dispatch => {\n        localStorage.removeItem(\"jwtToken\");\n        setAuthToken(false);\n        dispatch(setCurrentUser({}));\n    };\n\n\n"]},"metadata":{},"sourceType":"module"}